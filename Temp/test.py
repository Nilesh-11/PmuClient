import binascii

binary_data = b'\xaa\x01\x00^\x00\x01f\xd9\x97{\x07\x0b\xb2\xcb\x00\x00F\x1a\xcdQ:\x0b\xb6ZE"\xc8\x05\xbe\xc0K\x99Bp\x00\x01\x00\x00\x00\x00\x00\x00F%\xba\xf9>-\xf4eE\xa0\x14:>-\xf4ABp\x00\x01\x00\x00\x00\x00\x00\x00E\xff4\xf2=\x98-\x13EY\x08\x04=\xee\xa6=Bp\x00\x01\x00\x00\x00\x00\xc4<'
binary_data = b'\xaa\x01\x00^\x00\x01f\xd9\x97{\x08\r\xbb\xa0\x00\x00F\x1a\xcdQ:\x0ca\xfdE"\xc8\x07\xbe\xc0K\x97Bp\x00\x01\x00\x00\x00\x00\x00\x00F%\xba\xf8>-\xf5\x16E\xa0\x14:>-\xf4\xe4Bp\x00\x01\x00\x00\x00\x00\x00\x00E\xff4\xf2=\x98.\x86EY\x08\x14=\xee\xa7bBp\x00\x01\x00\x00\x00\x00\xdb\x86'
binary_data = b'\xaa\x01\x00^\x00\x01f\xd9\x97{\x07\x0b\xb2\xcb\x00\x00F\x1a\xcdQ:\x0b\xb6ZE"\xc8\x05\xbe\xc0K\x99Bp\x00\x01\x00\x00\x00\x00\x00\x00F%\xba\xf9>-\xf4eE\xa0\x14:>-\xf4ABp\x00\x01\x00\x00\x00\x00\x00\x00E\xff4\xf2=\x98-\x13EY\x08\x04=\xee\xa6=Bp\x00\x01\x00\x00\x00\x00\xc4<'
binary_data = b'\xaa\x01\x00^\x00\x01f\xd9\x97{\t\x08\xa5\x8b\x00\x00F\x1a\xcdR:\n\xb9XE"\xc7\xfb\xbe\xc0K\xa5Bp\x00\x01\x00\x00\x00\x00\x00\x00F%\xba\xfa>-\xf3XE\xa0\x145>-\xf3|Bp\x00\x01\x00\x00\x00\x00\x00\x00E\xff4\xf4=\x98+\x1cEY\x08\x14=\xee\xa5\x90Bp\x00\x01\x00\x00\x00\x00#\xa2'
seperators = ['^', 'f', '{', 'F', ':', '"', ]
hex_rep = binascii.hexlify(binary_data)
original_data = binascii.unhexlify(hex_rep)
print(hex_rep)

# import struct

# # Pack data into binary format (4-byte integer and 2-byte short)
# packed_data = struct.pack('iH', 12345, 65535)

# # Unpack binary data back into Python values
# unpacked_data = struct.unpack('iH', packed_data)
# print(unpacked_data)

# from bitarray import bitarray

# # Create a bit array and append some bits
# ba = bitarray()
# ba.append(True)
# ba.extend([False, True, False])

# # Convert to bytes and back
# bytes_data = ba.tobytes()
# ba2 = bitarray()
# ba2.frombytes(bytes_data)

# print(ba, bytes_data, ba2, ba2.frombytes(bytes_data))
